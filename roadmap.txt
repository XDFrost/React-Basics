- Makes easy to manage and build front-end

- Why use react: 
    - Before react, state (variables or storage) was managed by JS and DOM managed UI but there was no sync in these two.
    - This issue was seen in Facebook and was called PHANTOM MESSAGE PROBLEM (even after seeing the messages, users were getting message notifications).
    
- React is a library not a framework

- React makes SPA (Single Page Manipulation)

- Framework vs Library : There is pre defined structure for management in framework ; Libraries are compact in size

- Topics to learn:
    1. Core of react (State or UI manipulation, JSX) {JSX : Writing HtML inside JS}
    2. Component reusability
    3. Props (Properties : key/value)
    4. How to propogate changes (Hooks - Works as functions)

- Additional: (For Multipage Apps)
    1. Router (React doesn't have a router) (We have to use React Router DOM package)
    2. State Management - Uses Redux, Redux toolkit (Same as redux but with more abstraction), zustand, context API
    3. class based component
    4. BAAS Apps - Backend as a Service (Ex: Appwrite, Firebase, Superbase)

- Not a complete solution as there is no SEO (Our search engines can't read react effectively because of the generated code structure), browser rendering, no routing



-------- AFTER THIS ALL

BACKEND
NextJS - (Allows to backend and frontend in it together)



--------

npx - Node Package Executor
npm - Node Package Manager

node -v  =>  Gives version of node
npx create-react-app  =>  Slower method of creating react apps  =>  No longer supported  =>  Bulky

- Mobile Apps => React Native
- Web Apps => React DOM

- Main entry point : package.json
- test-dom is for testing 
- web-vitals is for performance tracking
- scripts is used to run projects
    1. start runs in development env
    2. build generate HTML, CSS, JS for browser to understand from react app
    3. test is for testing purpose
    4. eject is used to disable JS so that we can use some other lib or framework
- eslint gives us error if snippets are incorrect
- browserlist contains all browsers our app will run on 

- start script is used to run react 

npm run [script] command is used

- npm run start  =>  runs react on development server

- After we run npm run build, a build folder is made with all static assets that contains css and jsvascript which is made from react app. This build folder is serverd to users



--------

WE'LL USE VITE TO MAKE REACT APPS

npm create vite@latest is used to create vite apps

- Doesn't have node modules and hence faster
- In dependencies, we only have react and react-dom lib
- Since we don't have node modules, we'll manually install them using npm install or npm i
- npm run dev  =>  Run vite app



--------

- For basic react, public contains index.html which is shown to users
- Main entry point is index.js in src folder

- index.js contains:
    1. React library which is our core lib
    2. ReactDOM which is react implementation on web
        - DOM is just a tree structure ; React makes its own DOM called virtual DOM and then compares it with main DOM and make changes
        - Virtual DOM will create a root for the whole document in index.html and then assigns it to a variable to render it just like our browser DOM
        - We render HTML elements here inside render using JSX (Helps to render HTML through JS)
        - React.StrictMode is used in render to make it easier to find bugs in development phase
        - The HTML components in render comes from JS functions that returns any HTML snippets

- App.js contains:
    1. JS function that returns some HTML code 
    2. we have to export default function_name in order to use it in index.js

Now, we have created functions and used them in index.js BUT index.js is never getting loaded in index.html, so how is it working?
=> Our packages.json contains "react-scripts" that load all the js scripts index.html



--------

- For vite, we don't have react-scripts in package.json, so it loads js in index.html using script tag
- We can add other components to react app by making jsx files in src in vite
- For rendering in vite, we have to meet 2 conditions:
    1. Function name's first letter should be capital
    2. file type should be jsx
    3. We can only return 1 element in jsx file ; One way to return multiple elements : Encapsulate in a div or return a fragment (return(<> 
                                                        Code
                                                        <component/>
                                                        </>))



--------

- For basic react, we have following conditions:
    1. First letter of file should be capital
    2. component name / function name should have 1st capital letter

- Both js and jsx files works here



-------- 

- React tries to make trees from element
- How it sees/make a tree:
    Let's say we have to make a tree for <a> tag
        {
            type : 'a',
            props : {
                href : 'https://google.com',
                target : '_blank'
            },
            children : 'Click me to visit google'
        }
    - type is name of tag
    - props means properties and is a object because it can contian multiple properties
    - children refers to the contents of tag



---------

- Now, for rendering it to the webpage, react makes an empty DOM element, adds tag type, attributes and children to that DOM element and finally append that child to the maincontainer

- If we'll use the above object in react app, it won't work as were using our own custom render to render that object but react has its own render function that takes different arguments 

- In order to solve this, we can use React.createElement to make react elements ; It has its own syntax
    React.createElement(
        'a',
        {
            href : "www.google.com",
            target : "_blank"
        },
        "click me to visit google"
    )

- For using variables in App/functions, use {variable_name} ; this is called evaluated expression (output only)
- We can use global variables in createElement tree after completing the tree syntax
    var = "Hello"
    React.createElement(
        'a',
        {
            href : "www.google.com",        -OUTPUT->       click me to visit googleHello
            target : "_blank"
        },
        "click me to visit google", 
        var
    )



--------

02reactproject
Hooks

- const addValue = () => {
    console.log("Value added : "+ counter);
    counter++;
  }
  This code increments the value and prints it in console but doesn't change the UI. 
  This is where we use hooks.
  
- import { hook_name } from 'react' is used for hook
- { useState } hook is used to change the state or properties of a variable
    useState hook takes a default value and returns an array of 2 elements : a variable to whch value is assigned and a method that will change the value.

        const [counter, setcounter] = useState(3)
        Here 3 is default value assigned to counter and this value will be changed by setcounter



--------

VIRTUAL DOM , React Fiber , Reconciliation

- ReactDOM.createRoot method creates a DOM like structure just like in browser. It then compares the main DOM with this DOM and only update the changes that are updated in UI BUT our browser reload the whole page i.e. remove the DOM and repaints (rewrite) it. This is called page reload.
    - Here's virtual DOM helps us as we can track the whole DOM (tree like structure) and only update the values changed in DOM

- If the elements are network dependent, i.e. if an element changes its UI during an ongoing chnage, the change that was implemeted first will be implemeted following the second one.

- This is a problem as we are overwriting the first change so in other words, we don't want the first change to be implemented. This issue is solved by React Fiber.


- React Fiber is implementation of Virtual DOM react core algorithm. Its goal is to increase the efficiency by only rendering the last change in the stack. Its headline feature is incremental rendering : The ability to split rendering into chunks and spread it out over multiple frames i.e. a tree based rendering similar as Virtual DOM.
- It can pause, abort or assign priority to updates 


- Reconciliation is a react algorithm used to differ on tree with another to determine which parts to be changed (REACT DOM TREE and BROWSER DOM TREE)
- update is the result of setState from useState hook which eventually results in a re-render
- Reconciliation is the algo behind what is popularly understood as "virtual DOM"

- Working:
    - When a react app is rendered, a tree of nodes that describes the app is generated and saved in memory (JSX object tree or state tree), this tree is then flushed in rendering env using .render function.
    For eg in case of browser app, it's translated into a set of DOM operations. When the tree is updated (via setState), a new tree is generated and is diffed with previous to compute which operations are needed to update the app.

- Reconciliation is also available in React Native

- Key points:   
    1. In the UI, its not important to update immediatelty as it can degrade user experience.
    2. Different types of updates have different priorities like animation updates have higher priority than data update and hence we can use a priority queue for these
    3. Both push based (changes needed are told by programmer) and pull based (React does the changes itself) are used.
    
- React Fiber gives us following advantages:
    1. Pause work and come back to it later
    2. Assign priority to different works
    3. Reuse previous completed work
    4. Abort work if not needed



---------

03viteproject
Props 

- Props makes the component reusable. Let's say, we have made a UI, then we'll store that UI in a component to reuse it.
- src contains component folder that contains all the components.
- Let's say, we have a profile card, we'll write its HTML, CSS and JS inside the component so that next time we use it, we just have to change the values in the component.

- To use a prop, write props inside a function's parameter. Ex:
    export default function Card(props) { 
        return()
    }

- Initially props is an empty array object
- To use props, we'll define properties for Card class in App.jsx
    This passed value will be shown to props
        Ex:
            <Card channel = "first_channel"/>      first_channel will be corresponding to this card component

- Props can even have multiple values but only in form of declared variables. 
    Ex:
        <Card channel = "first_channel" someobj = {obj}/>

- This is how we pass value from one component to another and recieve those values from props.
- Now in order to use these values, we'll use .
    Ex: In function code, we'll use {props.[key]} to use a specific key value pair
 
- For a default value, use pipe (||) 
    ex: We are using a prop with default value 
        {btn_txt || Visit Me}
    - This is helpful when prop value isn't assigned to component

- We can use the obj directly instead of props
    ex:
        export default function Card({username, btn_txt = "Visit Me"}) {
            return()
        }
    - This is the same as above, but instead of props, we are using the props values.
    - Here default value is assigned at top for btn_text



----------

bgcolorchanger

- We can added normal css using 2 {} i.e. style = {{}}



----------  

passgenerator

- useCallback() hook is used to store a function in memory such that if reruned, we can use the part of function we need
    ex: useCallback(function, dependencies)
    - dependencies are values that get changed ; dependencies is an array of states

    const x = useCallback(() => {
    
    }, [dependencies])

- Now, we'll use another hook useEffect() to call this above function. It lets us synchronize a component with external system.
- Will run when the component is mounted or updated
    useEffect(() => {
        x()
    }, [dependencies])
- It takes 2 parameters, a function and a dependencies array

- useRef() is used if we want reference for something
    ex: const pass_ref = useRef(0)          // 0 is default here
    - To use this, use a parameter ref with the value assigned to useRef()
        ex: <input type='text'
            value={password}
            placeholder='Password'
            readOnly
            ref={pass_ref}/>        
    
- To copy something, we'll use window obj here
    window.navigator.clipboard.writeText(password)



-----------

CurrencyConverter

- Hooks are functions that lets us use different react features from our component ; We can use built-in hooks or combine them to built our own hooks as well.



-----------

React Router DOM 

- npm install react-router-dom
- import { Link, NavLink } from 'react-router-dom' is used to import Link and NavLink
- Link is used to navigate to a page without refreshing the page  ;  WE ARE NOT USING ANCHOR TAG BECAUSE IT REFRESHES THE WHOLE PAGE 
- NavLink is used to navigate to a page without refreshing the page but with some ADDITIONAL FEATURES LIKE ACTIVE CLASSNAME

- To use Link, use <Link to = '/'>Home</Link>  ;  to is the path to navigate to
- To use NavLink, use <NavLink to = '/' activeClassName = 'active'>Home</NavLink>  ;  activeClassName is the class name that will be added to the active link ; Made for navbar 
- we can use callback inside className of navlink
- We have access to 2 varibles:
    1. isActive : true if the link is active
    2. isPending : true if the link is pending

- Since we are using React router DOM, so have to use <RouterProvider> in main.jsx and provide the router attribute to it.
- To create a router, we'll use createBrowserRouter() method from react-router-dom ; It contains an array of objects that contains path and component to render.
- const routes = createBrowserRouter([
    {
        path : '/',
        element : Home
    }
  ]
)

- Now, we want our header and footer to be shown on every page, so we'll use <Outlet> in Layout file to show the header and footer on every page
- Outlet is used to pass the contents dynamically to the layout file with header and footer being static in all pages 

- return(
    <>
        <header/>
        <Outlet/>
        <footer/>
    </>
)

- Anything inside Outlet will be shown in the layout file with header and footer being static in all pages

- To use this layout, we can pass it in createBrowserRouter() method as element.

- const routes = createBrowserRouter([
    {
        path : '/',
        element : <Layout />
    }
  ]
)

- We can also give children argument to createBrowserRouter().
- children are the sub-routes of the main route

- const routes = createBrowserRouter([
    {
        path : '/',
        element : <Layout />,
        children : [
            {
                path : '',
                element : <Home />          // This will home page
            },
            {
                path : 'about',
                element : <About />         // This will be about page
            }
        ]
    }
  ]
)

- Another method of creating router object :

- const router = createBrowserRouter(
    createRoutesFromElements(
        <Route path = '/' element = {<Layout />} >
            <Route path = '' element = {<Home />} />,
            <Route path = 'about' element = {<About />} />
        </Route>
    )
)

- To get parameters from URL, we'll first create a route with :parameters at end 
    ex: <Route path = 'about/:id' element = {<About />} />
- Data will come on the basis of id
- This id can be accessed by the element/component mentioned in the route
- To access this id, use useParams() hook
    ex: const {id} = useParams()
        return(
            <h1>{id}</h1>
        )

- to get github data, we'll use github API => https://api.github.com/users/username
- To fetch data, we'll use fetch() method
    fetch('https://api.github.com/users/username')
        .then(res => res.json())
        .then(data => console.log(data))
    - This will give us the data of the user

- In order to optimize it, we can use loader in route
- We can make direct API call in route using loader 
- Using loader, once the mouse is hovered on the link, the data will be fetched and stored to cache ; This is called prefetching and helps in optimization
- To use loader, we'll make a fetch function and pass it to loader attribute in route

    ex: const fetchGithub = async () => {
        const res = await fetch('https://api.github.com/users/username')
        const data = await res.json()
        return data
    }

    add loader attribute to route as

    <Route 
        path = 'github' 
        element = {<github />} 
        loader = { fetchGithub } 
    />

    To use this data, we'll use useLoaderData() hook

    const data = useLoaderData()
        return(
            <h1>{data.login}</h1>
        )



------------

05contextAPI

- Context API is used for state management 
- Let's understand this with an example:

    |¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|
    |                                 App                                    | 
    |                                                                        |                             
    |    |¯¯¯¯¯¯¯¯¯¯¯|   |¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|    |                             
    |    |   Left    |   |                    Right                     |    |                             
    |    |           |   |                                              |    |                             
    |    |           |   |   |¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|   |    |                             
    |    |           |   |   |                 Top                  |   |    |                             
    |    |           |   |   |                                      |   |    |                             
    |    |           |   |   |              |¯¯¯¯¯¯¯¯¯|             |   |    |                             
    |    |           |   |   |              |  card   |             |   |    |                             
    |    |           |   |   |              |_________|             |   |    |                             
    |    |           |   |   |                                      |   |    |                             
    |    |           |   |   |                                      |   |    |                             
    |    |           |   |   |______________________________________|   |    |                             
    |    |           |   |                                              |    |                             
    |    |           |   |                                              |    |                             
    |    |           |   |   |¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|   |    |                             
    |    |           |   |   |                Bottom                |   |    |                             
    |    |           |   |   |                                      |   |    |                             
    |    |           |   |   |                                      |   |    |                             
    |    |           |   |   |                                      |   |    |                             
    |    |           |   |   |______________________________________|   |    |                             
    |    |           |   |                                              |    |  
    |    |___________|   |______________________________________________|    |  
    |                                                                        |
    |________________________________________________________________________|

In the above example, we have following components:
                                
                                App
                                /\    
                               /  \
                            Left  Right 
                                   /\
                                  /  \
                                Top  Bottom
                                 |
                                Card 

- Now, we want to pass a value from App to Card component. 
- For this, we first have to pass data from App to Right, then from Right to Bottom and then from Bottom to Card. This is a long process and is called **PROP DRILLING** and is not efficient.
- To solve this, we'll use Context API.
- Context API is a way to pass data through the component tree without having to pass props down manually at every level.

- Context API only exists in React.

- we can use alternatives like Redux, Redux-toolkit (RTK), Zustand, Recoil, MobX, etc. for state management as well.
- To use redux in react, we have to install redux and react-redux packages

- we'll use js file to create context as it is written in pure js
- Context can be of many types like user context, theme context, etc.

- To create a context, we'll use createContext() method from react
    ex: const AppContext = React.createContext()
- This will create a context object that we can use to pass data to the

- To use this context, we'll use Provider and Consumer
- Provider is used to provide the data to the components
    
    ex: <AppContext>
            <Login/>
            <Card/>
                <Data/>
        </AppContext>
    - Here, AppContext is acting as a provider to all the components inside it
    - All components inside AppContext can access the data provided by AppContext
    - AppContext becomes a provider only when it wraps the components inside it  

- Now, to use this AppContext as a provider, we'll make a jsx file
- To make a provider, we'll use AppContext.Provider
    ex: <AppContext.Provider>
            <Login/>
            <Card/>
                <Data/>
        </AppContext.Provider>

- In this file, we'll wrap all the components/children inside AppContext.Provider with a value attribute
- value attribute is used to pass the data to the components
    ex: <AppContext.Provider value = {data}>
           {children}
        </AppContext.Provider>
    - Here, data is the value that will be passed to all the components inside AppContext.Provider

- Now, wherever we want to use this data, we'll wrap that component inside AppContext
- In components, to use this data, we'll use useContext() hook
    ex: const data = useContext(AppContext)
    - This will give us the data passed by AppContext.Provider

